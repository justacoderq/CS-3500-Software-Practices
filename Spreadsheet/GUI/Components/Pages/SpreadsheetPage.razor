<!--
	Author: Prachi Aswani
	Version: 25 October 2024
-->
@namespace GUI.Client.Pages
@page "/sheets"
@using System.Diagnostics
@using CS3500.Formula
@using Microsoft.JSInterop
@rendermode InteractiveServer
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<PageTitle>Spreadsheet</PageTitle>

<h4 class="centered-title"> Spreadsheet </h4>

<!-- Centered Legend for cell formatting -->
<div class="color-legend" style="text-align: center; margin-bottom: 20px;">
	<span style="background-color: #d8bfd8 ; padding: 5px 15px; border-radius: 5px; margin: 0 20px;">Formula</span>: Highlighted in yellow
	<span style="background-color: lightgreen; padding: 5px 15px; border-radius: 5px; margin: 0 20px;">Double</span>: Highlighted in green
	<span style="background-color: lightcoral; padding: 5px 15px; border-radius: 5px; margin: 0 20px;">String</span>: Highlighted in red
</div>

<!-- Toolbar Section -->
<div class="toolbar">
	<button class="btn btn-primary" @onclick="SaveFile">Save</button>
	<div class="file-upload">
		<label class="btn btn-secondary" for="file-upload">Load</label>
		<InputFile id="file-upload" type="file" accept=".sprd" OnChange="HandleFileChooser" style="display: none;" />
	</div>
	<button class="btn btn-danger" @onclick="ClearCell">Clear Cell</button>
	<button class="btn btn-warning" @onclick="ClearAllCells">Clear All</button>
	<!-- Dark Mode Toggle Button -->
	<div class="dark-mode-toggle">
		<button class="btn btn-secondary" @onclick="ToggleDarkMode">
			@(isDarkMode ? "Light Mode" : "Dark Mode")
		</button>
	</div>
</div>

@if (isLoading)
{
	<div class="loading-indicator" role="alert" aria-live="assertive">Loading...</div>
}

<br />
<br />

<div class="cell-info">
	<label for="selectedCellName">Cell:</label>
	<input id="selectedCellName" type="text" value="@SelectedCellName" readonly />

	<label for="selectedCellValue">Value:</label>
	<input id="selectedCellValue" type="text" value="@SelectedCellValue" readonly />

	<label for="selectedCellContents">Contents:</label>
	<input id="selectedCellContents" type="text" @bind="@SelectedCellContents" @onblur="UpdateCellContents" @onkeyup="HandleKeyDown" @ref="cellInput" />
</div>

<!-- Modal for displaying error messages -->
@if (showErrorModal)
{
	<div class="modal-overlay">
		<div class="modal-content">
			<h2>Error</h2>
			<p>@ErrorMessage</p>
			<button class="btn btn-primary" @onclick="CloseErrorModal">Close</button>
		</div>
	</div>
}


<div>
	<div class="table-container">
		<div class="scrollable">
			<table class="table">
				<thead>
					<tr class="fixed-header">
						<th scope="col">&nbsp;</th>
						@for (int col = 0; col < COLS; col++)
						{
							<th scope="col">@Alphabet[col]</th>
						}
					</tr>
				</thead>

				<tbody>
					@for (int row = 0; row < ROWS; row++)
					{
						<tr style="padding:0px !important;">
							<th style="padding:0px !important;" scope="row" class="fixed-column">@(row + 1)</th>
							@for (int col = 0; col < COLS; col++)
							{
								int r = row;
								int c = col;
								string cellContent = CellsBackingStore[r, c];
								string cellStyle = string.Empty;

								// Apply conditional formatting based on the content type
								if (_spreadsheet.GetCellContents($"{Alphabet[c]}{r + 1}") is Formula)
								{
									cellStyle = "background-color: #d8bfd8;"; // Highlight formulas
								}
								else if (double.TryParse(cellContent, out _))
								{
									cellStyle = "background-color: lightgreen;"; // Highlight numbers
								}
								else if (!string.IsNullOrEmpty(cellContent))
								{
									cellStyle = "background-color: lightcoral;"; // Highlight strings
								}

								<td @onclick="() => CellClicked(r,c)" style="padding:0px !important; @cellStyle">
									<p class="spreadcell"> @CellsBackingStore[r, c]  </p>
								</td>
							}
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
</div>

<style>
	.spreadcell {
		width: 150px;
		height: 40px;
	}

	.table-container {
		overflow-x: auto;
	}

	.fixed-header {
		position: sticky;
		top: 0;
		z-index: 1;
		background-color: #ffffff !important;
	}

	.fixed-column {
		position: sticky;
		left: 0;
		z-index: 1;
		background-color: #ffffff !important;
	}

	.scrollable {
		white-space: nowrap; /* Ensures no line breaks within cells */
		width: 1000px;
		height: 500px;
		margin: -1px;
	}

	.modal-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
		display: flex;
		justify-content: center;
		align-items: center;
		z-index: 1000;
	}

	.modal-content {
		background-color: #fff;
		padding: 20px;
		border-radius: 5px;
		text-align: center;
		width: 300px;
	}

	.selected-cell {
		background-color: #add8e6; /* Light blue background */
		/* Smooth transition */
	}

	/* Dark mode styles */
	.dark-mode {
		background-color: #1e1e1e; /* Dark background */
		color: #ffffff; /* Light text */
	}

		.dark-mode .fixed-header,
		.dark-mode .fixed-column,
		.dark-mode .table th,
		.dark-mode .table td,
		.dark-mode .column-header,
		.dark-mode .row {
			background-color: black; /* Black background for headers, fixed columns, and row numbers */
			color: #ffffff; /* White text for headers, fixed columns, and row numbers */
		}

		.dark-mode .fixed-column {
			background-color: black; /* Black background for fixed columns */
		}

		.dark-mode .modal-content {
			background-color: #3c3c3c; /* Dark modal background */
		}

		.dark-mode .btn,
		.dark-mode input {
			background-color: #2b2b2b; /* Dark background for buttons and inputs */
			color: #ffffff; /* White text for buttons and inputs */
			border: 1px solid #444; /* Darker border for inputs */
		}

		.dark-mode .toolbar {
			background-color: #000000; /* Black background for the toolbar */
			color: #ffffff; /* White text for toolbar items */
		}

		.dark-mode .top-row {
			background-color: black; /* Black background for the top row */
			color: white; /* White text for contrast */
		}

		.dark-mode .table tr {
			background-color: black; /* Black background for table rows */
			color: #ffffff; /* White text for table rows */
		}

		.dark-mode .table th.fixed-header {
			/* Keep styles consistent with other headers */
			background-color: black; /* Ensure black background */
			color: #ffffff; /* Ensure white text */
		}

		/* Hover effect for table cells */
		.dark-mode .table td:hover,
		.dark-mode .table td.selected {
			background-color: white; /* White background on hover or when selected */
			color: black; /* Black text for contrast */
		}

		/* Style for cell contents input fields */
		.dark-mode .table td input {
			background-color: black; /* Black background for input fields in cells */
			color: white; /* White text for input fields */
			border: none; /* Remove border for input fields */
			width: 100%; /* Ensure input takes full width */
			height: 100%; /* Ensure input takes full height */
		}

		/* Adjust modal and error boundary */
		.dark-mode .blazor-error-boundary {
			background: #b32121; /* Update as needed */
			color: white; /* Ensure text is white */
		}

		.dark-mode .table th.fixed-column,
		.dark-mode .table th {
			background-color: black !important; /* Use !important to enforce the style */
			color: white !important; /* Enforce white text */
		}
</style>


<script type="text/javascript">
	function focusElement(id) {
		console.log(`looking for: ${id}`);
		var element = document.getElementById(id);
		if (element) {
			console.log(`focusing element: ${id} ${element}`)
			element.focus();
		}
	}

	function downloadFile(fileName, fileContent) {
		console.log(`download file ${fileName}`);
		// Create a blob with the file content
		const blob = new Blob([fileContent], { type: "text/plain" });

		// Create a link element
		const a = document.createElement("a");
		a.href = URL.createObjectURL(blob);
		a.download = fileName;

		// Append the anchor element to the body
		document.body.appendChild(a);

		// Click the link to trigger download
		a.click();

		// Remove the anchor element from the DOM
		document.body.removeChild(a);
	}

</script>